
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Defining MPRJ_IO_PADS=38

1. Executing Verilog-2005 frontend: /home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/wrapped_multiplier_8.v
Parsing SystemVerilog input from `/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/wrapped_multiplier_8.v' to AST representation.
Generating RTLIL representation for module `\wrapped_multiplier_8'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v
Parsing SystemVerilog input from `/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v' to AST representation.
Generating RTLIL representation for module `\invert'.
Generating RTLIL representation for module `\and2'.
Generating RTLIL representation for module `\or2'.
Generating RTLIL representation for module `\xor2'.
Generating RTLIL representation for module `\nand2'.
Generating RTLIL representation for module `\nor2'.
Generating RTLIL representation for module `\xnor2'.
Generating RTLIL representation for module `\and3'.
Generating RTLIL representation for module `\or3'.
Generating RTLIL representation for module `\nor3'.
Generating RTLIL representation for module `\nand3'.
Generating RTLIL representation for module `\xor3'.
Generating RTLIL representation for module `\xnor3'.
Generating RTLIL representation for module `\fa'.
Generating RTLIL representation for module `\Adder'.
Generating RTLIL representation for module `\subtractor'.
Generating RTLIL representation for module `\booth_substep'.
Generating RTLIL representation for module `\boothmul_8x8_signed'.
Warning: wire '\a' is assigned in a block at /home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:192.4-192.13.
Warning: wire '\b' is assigned in a block at /home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:193.4-193.13.
Warning: reg '\c_out' is assigned in a continuous assignment at /home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:0.0-0.0.
Warning: reg '\c_out' is assigned in a continuous assignment at /home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:0.0-0.0.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/runs/22_12_05_14_45/tmp/synthesis/hierarchy.dot'.
Dumping module wrapped_multiplier_8 to page 1.
Warning: WIDTHLABEL \io_out [37:22] 16
Warning: WIDTHLABEL \io_in [21:14] 8
Warning: WIDTHLABEL \io_in [13:6] 8

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \wrapped_multiplier_8
Used module:     \boothmul_8x8_signed
Used module:         \booth_substep
Used module:             \subtractor
Used module:                 \fa
Used module:                     \or3
Used module:                         \or2
Used module:                     \and2
Used module:                     \xor3
Used module:                         \xor2
Used module:                 \invert
Used module:             \Adder

4.2. Analyzing design hierarchy..
Top module:  \wrapped_multiplier_8
Used module:     \boothmul_8x8_signed
Used module:         \booth_substep
Used module:             \subtractor
Used module:                 \fa
Used module:                     \or3
Used module:                         \or2
Used module:                     \and2
Used module:                     \xor3
Used module:                         \xor2
Used module:                 \invert
Used module:             \Adder
Removing unused module `\xnor3'.
Removing unused module `\nand3'.
Removing unused module `\nor3'.
Removing unused module `\and3'.
Removing unused module `\xnor2'.
Removing unused module `\nor2'.
Removing unused module `\nand2'.
Removed 7 unused modules.
Mapping positional arguments of cell booth_substep.mysub (subtractor).
Mapping positional arguments of cell booth_substep.myadd (Adder).
Mapping positional arguments of cell subtractor.fa8 (fa).
Mapping positional arguments of cell subtractor.fa7 (fa).
Mapping positional arguments of cell subtractor.fa6 (fa).
Mapping positional arguments of cell subtractor.fa5 (fa).
Mapping positional arguments of cell subtractor.fa4 (fa).
Mapping positional arguments of cell subtractor.fa3 (fa).
Mapping positional arguments of cell subtractor.fa2 (fa).
Mapping positional arguments of cell subtractor.fa1 (fa).
Mapping positional arguments of cell subtractor.b8 (invert).
Mapping positional arguments of cell subtractor.b7 (invert).
Mapping positional arguments of cell subtractor.b6 (invert).
Mapping positional arguments of cell subtractor.b5 (invert).
Mapping positional arguments of cell subtractor.b4 (invert).
Mapping positional arguments of cell subtractor.b3 (invert).
Mapping positional arguments of cell subtractor.b2 (invert).
Mapping positional arguments of cell subtractor.b1 (invert).
Mapping positional arguments of cell or3.or2_1 (or2).
Mapping positional arguments of cell or3.or2_0 (or2).
Mapping positional arguments of cell Adder.fa8 (fa).
Mapping positional arguments of cell Adder.fa7 (fa).
Mapping positional arguments of cell Adder.fa6 (fa).
Mapping positional arguments of cell Adder.fa5 (fa).
Mapping positional arguments of cell Adder.fa4 (fa).
Mapping positional arguments of cell Adder.fa3 (fa).
Mapping positional arguments of cell Adder.fa2 (fa).
Mapping positional arguments of cell Adder.fa1 (fa).
Mapping positional arguments of cell fa._i4 (or3).
Mapping positional arguments of cell fa._i3 (and2).
Mapping positional arguments of cell fa._i2 (and2).
Mapping positional arguments of cell fa._i1 (and2).
Mapping positional arguments of cell fa._i0 (xor3).
Mapping positional arguments of cell boothmul_8x8_signed.step8 (booth_substep).
Mapping positional arguments of cell boothmul_8x8_signed.step7 (booth_substep).
Mapping positional arguments of cell boothmul_8x8_signed.step6 (booth_substep).
Mapping positional arguments of cell boothmul_8x8_signed.step5 (booth_substep).
Mapping positional arguments of cell boothmul_8x8_signed.step4 (booth_substep).
Mapping positional arguments of cell boothmul_8x8_signed.step3 (booth_substep).
Mapping positional arguments of cell boothmul_8x8_signed.step2 (booth_substep).
Mapping positional arguments of cell boothmul_8x8_signed.step1 (booth_substep).
Mapping positional arguments of cell xor3.xor2_1 (xor2).
Mapping positional arguments of cell xor3.xor2_0 (xor2).
WARNING: TRISTATE_BUFFER_MAP is defined but could not be found: /localtmp/asic/gf180/pdk//gf180mcuC/libs.tech/openlane/gf180mcu_fd_sc_mcu7t5v0/tribuff_map.v

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \wrapped_multiplier_8
Used module:     \boothmul_8x8_signed
Used module:         \booth_substep
Used module:             \subtractor
Used module:                 \fa
Used module:                     \or3
Used module:                         \or2
Used module:                     \and2
Used module:                     \xor3
Used module:                         \xor2
Used module:                 \invert
Used module:             \Adder

5.1.2. Analyzing design hierarchy..
Top module:  \wrapped_multiplier_8
Used module:     \boothmul_8x8_signed
Used module:         \booth_substep
Used module:             \subtractor
Used module:                 \fa
Used module:                     \or3
Used module:                         \or2
Used module:                     \and2
Used module:                     \xor3
Used module:                         \xor2
Used module:                 \invert
Used module:             \Adder
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:129$5 in module booth_substep.
Marked 1 switch rules as full_case in process $proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:186$37 in module boothmul_8x8_signed.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 5 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~6 debug messages>

5.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\booth_substep.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:129$5'.
     1/13: $5\f8[7:7]
     2/13: $4\f8[7:7]
     3/13: $3\f8[7:0] [7]
     4/13: $3\f8[7:0] [6:0]
     5/13: $2\l8[7:0] [7]
     6/13: $2\l8[7:0] [6:0]
     7/13: $2\cq0[0:0]
     8/13: $1\l8[7:0] [7]
     9/13: $1\f8[7:0] [6:0]
    10/13: $2\f8[7:7]
    11/13: $1\l8[7:0] [6:0]
    12/13: $1\f8[7:0] [7]
    13/13: $1\cq0[0:0]
Creating decoders for process `\boothmul_8x8_signed.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:186$37'.
     1/5: $1\a[7:0]
     2/5: $1\b[7:0]
     3/5: $0\b_reg[7:0]
     4/5: $0\a_reg[7:0]
     5/5: $0\c_out[15:0]

5.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\booth_substep.\f8' from process `\booth_substep.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:129$5'.
No latch inferred for signal `\booth_substep.\l8' from process `\booth_substep.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:129$5'.
No latch inferred for signal `\booth_substep.\cq0' from process `\booth_substep.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:129$5'.

5.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\boothmul_8x8_signed.\c_out' using process `\boothmul_8x8_signed.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:186$37'.
  created $dff cell `$procdff$121' with positive edge clock.
Creating register for signal `\boothmul_8x8_signed.\b' using process `\boothmul_8x8_signed.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:186$37'.
  created $dff cell `$procdff$122' with positive edge clock.
Creating register for signal `\boothmul_8x8_signed.\a' using process `\boothmul_8x8_signed.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:186$37'.
  created $dff cell `$procdff$123' with positive edge clock.
Creating register for signal `\boothmul_8x8_signed.\a_reg' using process `\boothmul_8x8_signed.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:186$37'.
  created $dff cell `$procdff$124' with positive edge clock.
Creating register for signal `\boothmul_8x8_signed.\b_reg' using process `\boothmul_8x8_signed.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:186$37'.
  created $dff cell `$procdff$125' with positive edge clock.

5.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\booth_substep.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:129$5'.
Removing empty process `booth_substep.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:129$5'.
Found and cleaned up 1 empty switch in `\boothmul_8x8_signed.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:186$37'.
Removing empty process `boothmul_8x8_signed.$proc$/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/../../verilog/rtl/multilib_8.v:186$37'.
Cleaned up 6 empty switches.

5.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module booth_substep.
<suppressed ~12 debug messages>
Optimizing module subtractor.
Optimizing module or3.
Optimizing module Adder.
Optimizing module fa.
Optimizing module boothmul_8x8_signed.
Optimizing module xor3.
Optimizing module xor2.
Optimizing module or2.
Optimizing module and2.
Optimizing module invert.
Optimizing module wrapped_multiplier_8.

5.3. Executing FLATTEN pass (flatten design).
Deleting now unused module booth_substep.
Deleting now unused module subtractor.
Deleting now unused module or3.
Deleting now unused module Adder.
Deleting now unused module fa.
Deleting now unused module boothmul_8x8_signed.
Deleting now unused module xor3.
Deleting now unused module xor2.
Deleting now unused module or2.
Deleting now unused module and2.
Deleting now unused module invert.
<suppressed ~44 debug messages>

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.
<suppressed ~173 debug messages>

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..
Removed 74 unused cells and 1492 unused wires.
<suppressed ~147 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module wrapped_multiplier_8...
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [15]:
    port Q[15] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[0] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$101 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [14]:
    port Q[14] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[6] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [13]:
    port Q[13] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[5] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [12]:
    port Q[12] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[4] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [11]:
    port Q[11] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[3] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [10]:
    port Q[10] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[2] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [9]:
    port Q[9] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[1] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [8]:
    port Q[8] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[0] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [7]:
    port Q[7] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[0] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$86 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [6]:
    port Q[6] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[6] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$98 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [5]:
    port Q[5] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[5] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$98 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [4]:
    port Q[4] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[4] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$98 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [3]:
    port Q[3] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[3] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$98 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [2]:
    port Q[2] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[2] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$98 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [1]:
    port Q[1] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[1] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$98 ($mux)
Warning: multiple conflicting drivers for wrapped_multiplier_8.\boothmul_8x8_signed_1.c_out [0]:
    port Q[0] of cell $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff)
    port Y[0] of cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$98 ($mux)
Warning: Wire wrapped_multiplier_8.\io_out [21] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [20] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [19] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [18] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [17] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [16] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [15] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [14] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [13] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [12] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [11] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [10] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [9] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [8] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [7] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [6] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [5] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [4] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [3] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [2] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [1] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [0] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [5] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [4] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [3] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [2] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [1] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [0] is used but has no driver.
Found and reported 44 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
<suppressed ~168 debug messages>
Removed a total of 56 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapped_multiplier_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\boothmul_8x8_signed_1.\step1.$procmux$104: \boothmul_8x8_signed_1.a [0] -> 1'0
      Replacing known input bits on port B of cell $flatten\boothmul_8x8_signed_1.\step1.$procmux$83: \boothmul_8x8_signed_1.a [0] -> 1'1
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$42.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$45.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$51.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$54.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$60.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$66.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$72.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$78.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$83.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step2.$procmux$95.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$42.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$45.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$51.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$54.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$60.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$66.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$72.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$78.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$83.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step3.$procmux$95.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$42.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$45.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$51.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$54.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$60.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$66.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$72.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$78.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$83.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step4.$procmux$95.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$39.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$39.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$42.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$42.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$45.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$45.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$51.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$42.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$45.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$51.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$54.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$60.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$66.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$72.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$78.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$83.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step5.$procmux$95.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$54.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$57.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$60.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$63.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$66.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$72.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$78.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$83.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$42.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$45.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$51.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$54.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$60.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$66.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$72.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$78.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$83.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step6.$procmux$95.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step1.$procmux$95.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$42.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$45.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$51.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$54.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$60.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$66.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$72.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$78.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$83.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step7.$procmux$95.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step8.$procmux$42.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step8.$procmux$45.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step8.$procmux$51.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step8.$procmux$54.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step8.$procmux$60.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step8.$procmux$66.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step8.$procmux$72.
    dead port 1/2 on $mux $flatten\boothmul_8x8_signed_1.\step8.$procmux$78.
    dead port 2/2 on $mux $flatten\boothmul_8x8_signed_1.\step8.$procmux$95.
Removed 85 multiplexer ports.
<suppressed ~44 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapped_multiplier_8.
  Optimizing cells in module \wrapped_multiplier_8.
Performed a total of 14 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..
Removed 0 unused cells and 283 unused wires.
<suppressed ~211 debug messages>

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapped_multiplier_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapped_multiplier_8.
Performed a total of 0 changes.

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.7.16. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking wrapped_multiplier_8.boothmul_8x8_signed_1.c_out as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapped_multiplier_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapped_multiplier_8.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\boothmul_8x8_signed_1.$procdff$125 ($dff) from module wrapped_multiplier_8 (D = \io_in [21:14], Q = \boothmul_8x8_signed_1.b_reg).
Adding EN signal on $flatten\boothmul_8x8_signed_1.$procdff$124 ($dff) from module wrapped_multiplier_8 (D = \io_in [13:6], Q = \boothmul_8x8_signed_1.a_reg).
Adding EN signal on $flatten\boothmul_8x8_signed_1.$procdff$123 ($dff) from module wrapped_multiplier_8 (D = \boothmul_8x8_signed_1.a_reg, Q = \boothmul_8x8_signed_1.a).
Adding EN signal on $flatten\boothmul_8x8_signed_1.$procdff$122 ($dff) from module wrapped_multiplier_8 (D = \boothmul_8x8_signed_1.b_reg, Q = \boothmul_8x8_signed_1.b).
Adding EN signal on $flatten\boothmul_8x8_signed_1.$procdff$121 ($dff) from module wrapped_multiplier_8 (D = 16'0000000000000000, Q = \boothmul_8x8_signed_1.c_out).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 12 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 13 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 14 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.
Setting constant 0-bit at position 15 on $auto$ff.cc:266:slice$146 ($dffe) from module wrapped_multiplier_8.

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [14] between cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [13] between cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [12] between cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [11] between cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [10] between cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [9] between cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [8] between cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$89.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [7] between cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$86.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [15] between cell $flatten\boothmul_8x8_signed_1.\step8.$procmux$101.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [6] between cell $flatten\boothmul_8x8_signed_1.\step7.$procmux$86.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [5] between cell $flatten\boothmul_8x8_signed_1.\step6.$procmux$86.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [4] between cell $flatten\boothmul_8x8_signed_1.\step5.$procmux$86.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [3] between cell $flatten\boothmul_8x8_signed_1.\step4.$procmux$86.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [2] between cell $flatten\boothmul_8x8_signed_1.\step3.$procmux$86.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [1] between cell $flatten\boothmul_8x8_signed_1.\step2.$procmux$86.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Warning: Driver-driver conflict for \boothmul_8x8_signed_1.c_out [0] between cell $flatten\boothmul_8x8_signed_1.\step1.$procmux$86.Y and constant 1'0 in wrapped_multiplier_8: Resolved using constant.
Removed 784 unused cells and 4578 unused wires.
<suppressed ~5301 debug messages>

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.9.9. Rerunning OPT passes. (Maybe there is more to do..)

5.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapped_multiplier_8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapped_multiplier_8.
Performed a total of 0 changes.

5.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.9.13. Executing OPT_DFF pass (perform DFF optimizations).

5.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.9.16. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module wrapped_multiplier_8:
  created 0 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapped_multiplier_8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapped_multiplier_8.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

5.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.
<suppressed ~11 debug messages>

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapped_multiplier_8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapped_multiplier_8.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\wrapped_multiplier_8' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \wrapped_multiplier_8

5.25.2. Analyzing design hierarchy..
Top module:  \wrapped_multiplier_8
Removed 0 unused modules.

5.26. Printing statistics.

=== wrapped_multiplier_8 ===

   Number of wires:                516
   Number of wire bits:            866
   Number of public wires:         516
   Number of public wire bits:     866
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

5.27. Executing CHECK pass (checking for obvious problems).
Checking module wrapped_multiplier_8...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/home/mm4uz/asic/gf180-shuttle-0/submission/gf180-mul-8-seq/openlane/wrapped_multiplier_8/runs/22_12_05_14_45/tmp/synthesis/post_techmap.dot'.
Dumping module wrapped_multiplier_8 to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapped_multiplier_8..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapped_multiplier_8.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapped_multiplier_8'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapped_multiplier_8.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..
Removed 0 unused cells and 511 unused wires.
<suppressed ~511 debug messages>

10. Printing statistics.

=== wrapped_multiplier_8 ===

   Number of wires:                  5
   Number of wire bits:            116
   Number of public wires:           5
   Number of public wire bits:     116
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

11. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell gf180mcu_fd_sc_mcu7t5v0__dffnq_1 (noninv, pins=3, area=65.86) is a direct match for cell type $_DFF_N_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffq_1 (noninv, pins=3, area=63.66) is a direct match for cell type $_DFF_P_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1 (noninv, pins=4, area=74.64) is a direct match for cell type $_DFF_NN0_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1 (noninv, pins=4, area=79.03) is a direct match for cell type $_DFF_NN1_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 (noninv, pins=4, area=74.64) is a direct match for cell type $_DFF_PN0_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffsnq_1 (noninv, pins=4, area=79.03) is a direct match for cell type $_DFF_PN1_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1 (noninv, pins=5, area=94.39) is a direct match for cell type $_DFFSR_NNN_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1 (noninv, pins=5, area=85.61) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \gf180mcu_fd_sc_mcu7t5v0__dffnq_1 _DFF_N_ (.CLKN( C), .D( D), .Q( Q));
    \gf180mcu_fd_sc_mcu7t5v0__dffq_1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    \gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1 _DFF_NN0_ (.CLKN( C), .D( D), .Q( Q), .RN( R));
    \gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1 _DFF_NN1_ (.CLKN( C), .D( D), .Q( Q), .SETN( R));
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RN( R));
    \gf180mcu_fd_sc_mcu7t5v0__dffsnq_1 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SETN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1 _DFFSR_NNN_ (.CLKN( C), .D( D), .Q( Q), .RN( R), .SETN( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1 _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .RN( R), .SETN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

11.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\wrapped_multiplier_8':

12. Printing statistics.

=== wrapped_multiplier_8 ===

   Number of wires:                  5
   Number of wire bits:            116
   Number of public wires:           5
   Number of public wire bits:     116
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

[INFO]: USING STRATEGY AREA 0

13. Executing ABC pass (technology mapping using ABC).

13.1. Extracting gate netlist of module `\wrapped_multiplier_8' to `/tmp/yosys-abc-VI8ceS/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

14. Executing SETUNDEF pass (replace undef values with defined constants).

15. Executing HILOMAP pass (mapping to constant drivers).

16. Executing SPLITNETS pass (splitting up multi-bit signals).

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapped_multiplier_8..
Removed 0 unused cells and 76 unused wires.
<suppressed ~1 debug messages>

18. Executing INSBUF pass (insert buffer cells for connected wires).

19. Executing CHECK pass (checking for obvious problems).
Checking module wrapped_multiplier_8...
Warning: Wire wrapped_multiplier_8.\io_out [37] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [36] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [35] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [34] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [33] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [32] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [31] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [30] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [29] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [28] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [27] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [26] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [25] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [24] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [23] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [22] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [21] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [20] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [19] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [18] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [17] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [16] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [15] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [14] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [13] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [12] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [11] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [10] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [9] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [8] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [7] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [6] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [5] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [4] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [3] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [2] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [1] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_out [0] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [37] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [36] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [35] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [34] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [33] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [32] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [31] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [30] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [29] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [28] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [27] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [26] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [25] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [24] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [23] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [22] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [21] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [20] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [19] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [18] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [17] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [16] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [15] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [14] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [13] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [12] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [11] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [10] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [9] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [8] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [7] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [6] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [5] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [4] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [3] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [2] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [1] is used but has no driver.
Warning: Wire wrapped_multiplier_8.\io_oeb [0] is used but has no driver.
Found and reported 76 problems.

20. Printing statistics.

=== wrapped_multiplier_8 ===

   Number of wires:                  5
   Number of wire bits:            116
   Number of public wires:           5
   Number of public wire bits:     116
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 76
     gf180mcu_fd_sc_mcu7t5v0__tieh     16
     gf180mcu_fd_sc_mcu7t5v0__tiel     60

   Chip area for module '\wrapped_multiplier_8': 667.340800

21. Executing Verilog backend.

21.1. Executing BMUXMAP pass.

21.2. Executing DEMUXMAP pass.
Dumping module `\wrapped_multiplier_8'.

Warnings: 114 unique messages, 143 total
End of script. Logfile hash: 601f74eafe, CPU: user 2.67s system 0.04s, MEM: 122.44 MB peak
Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)
Time spent: 41% 1x flatten (1 sec), 17% 4x stat (0 sec), ...
